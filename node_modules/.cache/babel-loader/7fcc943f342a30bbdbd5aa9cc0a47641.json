{"remainingRequest":"/Users/daniellopez/Downloads/snipp.in-master/node_modules/thread-loader/dist/cjs.js!/Users/daniellopez/Downloads/snipp.in-master/node_modules/babel-loader/lib/index.js!/Users/daniellopez/Downloads/snipp.in-master/src/store/modules/Files/actions.js","dependencies":[{"path":"/Users/daniellopez/Downloads/snipp.in-master/src/store/modules/Files/actions.js","mtime":1608957294000},{"path":"/Users/daniellopez/Downloads/snipp.in-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/daniellopez/Downloads/snipp.in-master/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/daniellopez/Downloads/snipp.in-master/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/daniellopez/Downloads/snipp.in-master/src/store/modules/Files/actions.js"],"names":["types","VFile","fileTypes","db","Dexie","omit","loadFiles","commit","dispatch","transaction","openFiles","activeFiles","files","toArray","root","filesObject","reduce","result","item","Object","assign","id","editable","console","log","SET_FILES","then","catch","error","createFile","fileDetails","state","details","file","type","FILE","add","createDirectory","directoryDetails","directory","DIRECTORY","updateFileContents","contents","where","equals","modify","ModifyError","failures","length","renameFile","name","openRenameMode","deleteFile","delete","deleteDirectory","rootGetters","children","i","child"],"mappings":"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","sourcesContent":["import { types } from \"./mutations\";\nimport VFile, { fileTypes } from \"@/models/vFile.model\";\nimport db from \"@/utils/db\";\nimport Dexie from \"dexie\";\nimport omit from \"lodash/omit\";\n\nexport default {\n  /**\n   * Loads all the files available in the localstorage into the store\n   */\n  loadFiles: async ({ commit, dispatch }) => {\n    db.transaction(\"rw\", db.openFiles, db.activeFiles, db.files, async () => {\n      const openFiles = await db.openFiles.toArray();\n      const activeFiles = await db.activeFiles.toArray();\n      const files = await db.files.toArray();\n\n      await dispatch(\n        \"Editor/reOpenFiles\",\n        { openFiles: openFiles, activeFiles: activeFiles },\n        { root: true }\n      );\n\n      const filesObject = files.reduce((result, item) => {\n        Object.assign(result, {\n          [item.id]: new VFile({ ...item, editable: false }),\n        });\n        return result;\n      }, {});\n      console.log({ filesObject });\n      commit(types.SET_FILES, filesObject);\n    })\n      .then(() => {\n        console.log(\"transaction committed\");\n      })\n      .catch((error) => {\n        console.error(\"Generic error: \" + error);\n      });\n  },\n\n  /**\n   * Creates a new file\n   */\n  createFile: async ({ state, commit, dispatch }, fileDetails) => {\n    const details = fileDetails ? fileDetails : {};\n    const file = new VFile({ ...details, type: fileTypes.FILE });\n    commit(types.SET_FILES, {\n      ...state.files,\n      [file.id]: file,\n    });\n    db.files.add(file, [\"id\"]).catch((error) => {\n      console.error(error);\n    });\n    return file;\n    // dispatch(\"Editor/openFile\", file.id, { root: true });\n  },\n\n  createDirectory: async ({ state, commit }, directoryDetails) => {\n    const details = directoryDetails ? directoryDetails : {};\n    const directory = new VFile({ ...details, type: fileTypes.DIRECTORY });\n    commit(types.SET_FILES, {\n      ...state.files,\n      [directory.id]: directory,\n    });\n    db.files.add(directory, [\"id\"]).catch((error) => {\n      console.error(error);\n    });\n  },\n\n  updateFileContents: async ({ state, commit, dispatch }, { id, contents }) => {\n    if (!id) return;\n\n    commit(types.SET_FILES, {\n      ...state.files,\n      [id]: {\n        ...state.files[id],\n        contents,\n      },\n    });\n    db.transaction(\"rw\", db.files, async () => {\n      // Mark bigfoots:\n      await db.files\n        .where(\"id\")\n        .equals(id)\n        .modify({ contents });\n      console.log(`file ${id} updated!`);\n    })\n      .catch(Dexie.ModifyError, (error) => {\n        // ModifyError did occur\n        console.error(error.failures.length + \" items failed to modify\");\n      })\n      .catch((error) => {\n        console.error(\"Generic error: \" + error);\n      });\n  },\n  renameFile: async ({ state, commit }, { id, name }) => {\n    if (!id) return;\n\n    commit(types.SET_FILES, {\n      ...state.files,\n      [id]: {\n        ...state.files[id],\n        name,\n        editable: false,\n      },\n    });\n\n    db.transaction(\"rw\", db.files, async () => {\n      // Mark bigfoots:\n      await db.files\n        .where(\"id\")\n        .equals(id)\n        .modify({ name });\n      console.log(`file ${id} renamed!`);\n    })\n      .catch(Dexie.ModifyError, (error) => {\n        // ModifyError did occur\n        console.error(error.failures.length + \" items failed to modify\");\n      })\n      .catch((error) => {\n        console.error(\"Generic error: \" + error);\n      });\n  },\n\n  openRenameMode: async ({ state, commit }, { id }) => {\n    if (!id) return;\n\n    commit(types.SET_FILES, {\n      ...state.files,\n      [id]: {\n        ...state.files[id],\n        editable: true,\n      },\n    });\n  },\n\n  deleteFile: async ({ state, commit, dispatch }, { id }) => {\n    if (!id) return;\n\n    await dispatch(\"Editor/closeFileFromAllEditor\", { id }, { root: true });\n    console.log(\"back to delete file\");\n    commit(types.SET_FILES, omit(state.files, id));\n    db.transaction(\"rw\", db.files, async () => {\n      // Mark bigfoots:\n      await db.files\n        .where(\"id\")\n        .equals(id)\n        .delete();\n      console.log(`file ${id} deleted!`);\n    })\n      .catch(Dexie.ModifyError, (error) => {\n        // ModifyError did occur\n        console.error(error.failures.length + \" items failed to modify\");\n      })\n      .catch((error) => {\n        console.error(\"Generic error: \" + error);\n      });\n  },\n  deleteDirectory: async ({ state, commit, dispatch, rootGetters }, { id }) => {\n    if (!id) return;\n\n    const children = rootGetters[\"Editor/getChildren\"](id);\n    // delete all the children of the directory first\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n      if (child.type === fileTypes.DIRECTORY) {\n        await dispatch(\"deleteDirectory\", { id: child.id });\n      } else {\n        await dispatch(\"deleteFile\", { id: child.id });\n      }\n    }\n    // then delete the directory\n    commit(types.SET_FILES, omit(state.files, id));\n    db.transaction(\"rw\", db.files, async () => {\n      // Mark bigfoots:\n      await db.files\n        .where(\"id\")\n        .equals(id)\n        .delete();\n      console.log(`file ${id} deleted!`);\n    })\n      .catch(Dexie.ModifyError, (error) => {\n        // ModifyError did occur\n        console.error(error.failures.length + \" items failed to modify\");\n      })\n      .catch((error) => {\n        console.error(\"Generic error: \" + error);\n      });\n  },\n};\n"]}]}