{"remainingRequest":"/Users/daniellopez/Downloads/snipp.in-master/node_modules/thread-loader/dist/cjs.js!/Users/daniellopez/Downloads/snipp.in-master/node_modules/babel-loader/lib/index.js!/Users/daniellopez/Downloads/snipp.in-master/src/store/modules/Editor/actions.js","dependencies":[{"path":"/Users/daniellopez/Downloads/snipp.in-master/src/store/modules/Editor/actions.js","mtime":1608957294000},{"path":"/Users/daniellopez/Downloads/snipp.in-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/daniellopez/Downloads/snipp.in-master/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/daniellopez/Downloads/snipp.in-master/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/daniellopez/Downloads/snipp.in-master/src/store/modules/Editor/actions.js"],"names":["types","OpenFileFootprint","db","EDITORS","openFile","state","commit","dispatch","id","openFiles","activeEditor","includes","SET_OPEN_FILES","newOpenFile","editor","add","catch","error","console","reOpenFiles","activeFiles","primaryFiles","secondaryFiles","forEach","file","primary","push","secondary","primaryActiveFile","secondaryActiveFile","SET_ACTIVE_FILES","closeFile","log","isActive","filter","_id","transaction","where","equals","delete","length","clear","then","closeFileFromAllEditor","editors","Object","keys","i","setActiveFile","newActiveFile","put"],"mappings":"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","sourcesContent":["import { types } from \"./mutations\";\nimport OpenFileFootprint from \"@/models/openFileFootprint.model\";\nimport db from \"@/utils/db\";\nimport { EDITORS } from \"./initialState\";\n\nexport default {\n  /**\n   * Opens a file in active editor or primary editor\n   * @param {String} id id of the file\n   */\n  openFile: async ({ state, commit, dispatch }, { id }) => {\n    // check if the file is already opened in the active editor\n    if (!state.openFiles[state.activeEditor].includes(id)) {\n      commit(types.SET_OPEN_FILES, {\n        ...state.openFiles,\n        [state.activeEditor]: [...state.openFiles[state.activeEditor], id],\n      });\n      let newOpenFile = new OpenFileFootprint({\n        editor: state.activeEditor,\n        id: id,\n      });\n      db.openFiles.add(newOpenFile, [\"id\"]).catch((error) => {\n        console.error(error);\n      });\n    }\n    // set as the active file in the editor\n    // commit(types.SET_ACTIVE_FILES, {\n    //   ...state.activeFiles,\n    //   [state.activeEditor]: id,\n    // });\n\n    // calling dispatch because activeFileId needs to be saved in indexedDB\n    await dispatch(\"setActiveFile\", {\n      editor: state.activeEditor,\n      id: id,\n    });\n  },\n\n  /**\n   * Opens a list of files in primary editor\n   * @param {Array} ids of the file\n   */\n\n  reOpenFiles: async ({ state, commit }, { openFiles, activeFiles }) => {\n    // check if the file is already opened in the active editor\n    // if (!state.openFiles[state.activeEditor].includes(id)) {\n    let primaryFiles = [],\n      secondaryFiles = [];\n    openFiles.forEach((file) => {\n      if (file.editor === EDITORS.primary) {\n        primaryFiles.push(file.id);\n      } else {\n        secondaryFiles.push(file.id);\n      }\n    });\n\n    commit(types.SET_OPEN_FILES, {\n      ...state.openFiles,\n      [EDITORS.primary]: [...state.openFiles[EDITORS.primary], ...primaryFiles],\n      [EDITORS.secondary]: [\n        ...state.openFiles[EDITORS.secondary],\n        ...secondaryFiles,\n      ],\n    });\n    // }\n    // set as the active file in the editor\n\n    let primaryActiveFile, secondaryActiveFile;\n    activeFiles.forEach((file) => {\n      if (file.editor === EDITORS.primary) {\n        primaryActiveFile = file.id;\n      } else {\n        secondaryActiveFile = file.id;\n      }\n    });\n    commit(types.SET_ACTIVE_FILES, {\n      ...state.activeFiles,\n      [EDITORS.primary]: primaryActiveFile,\n      [EDITORS.secondary]: secondaryActiveFile,\n    });\n  },\n\n  /**\n   * Close a file from an editor\n   * @param {String} editor Id/name of the editor\n   * @param {String} id id of the file to be closed\n   */\n  closeFile: async ({ state, commit, dispatch }, { editor, id }) => {\n    // check if the file is currently opened\n    if (state.activeFiles[editor] === id) {\n      console.log({ editor, id, isActive: true });\n\n      //set the first file in the editor's open files as the active file\n\n      await dispatch(\"setActiveFile\", {\n        editor,\n        id: state.openFiles[editor].filter((_id) => _id !== id)[0] || null,\n      });\n    }\n\n    // remove the file from the open editors\n    commit(types.SET_OPEN_FILES, {\n      ...state.openFiles,\n      // check if there are any open files in the editor\n      [editor]: state.openFiles[editor]\n        ? state.openFiles[editor].filter((_id) => _id !== id)\n        : [],\n    });\n    // debugger\n\n    db.transaction(\"rw\", db.openFiles, db.activeFiles, async () => {\n      // removing closed files fron openFiles\n      await db.openFiles\n        .where(\"id\")\n        .equals(id)\n        .delete();\n      console.log(`file ${id} deleted!`);\n\n      // removing existing active file if no file is opened.\n      if (state.openFiles[editor].length === 0) {\n        await db.activeFiles.clear();\n        console.log(`activeFiles emptied.`);\n      }\n    })\n      .then(() => {\n        console.log(\"transaction done\");\n      })\n      .catch((error) => {\n        console.error(\"Generic error: \" + error);\n      });\n  },\n\n  /**\n   * Close a file from all the available editor\n   * used when a file is being deleted\n   * @param {String} id id of the file to be closed\n   */\n  closeFileFromAllEditor: async ({ state, dispatch }, { id }) => {\n    // remove the file from the open files list of all editors\n    const editors = Object.keys(state.openFiles);\n    for (let i = 0; i < editors.length; i++) {\n      if (state.openFiles[editors[i]].includes(id)) {\n        await dispatch(\"closeFile\", { editor: editors[i], id });\n      }\n    }\n  },\n\n  /**\n   * Set a file as an active file in an editor\n   * @param {String} editor name of the editor\n   * @param {String} id id of the file to set active\n   */\n  setActiveFile: async ({ state, commit }, { editor, id }) => {\n    commit(types.SET_ACTIVE_FILES, {\n      ...state.activeFiles,\n      [editor]: id,\n    });\n\n    if (id && editor) {\n      let newActiveFile = new OpenFileFootprint({\n        editor: state.activeEditor,\n        id: id,\n      });\n\n      // replaces the activeFile stored in IndexedDB with the new active file\n      db.activeFiles.put(newActiveFile).catch((error) => {\n        console.error(error);\n      });\n    }\n  },\n};\n"]}]}